(function () {
  var scheme = (("https:" == document.location.protocol) ? "https" : "http");
  var adnxs_domain = 'secure.adnxs.com';
  var aol_domain = 'secure.leadback.advertising.com';
  window.adroll_seg_eid = "5CKQPXVRVBG3NPZVA5FSEA";
  window.adroll_sendrolling_cross_device = true;
  window.adroll_form_fields = {};
  window.adroll_third_party_forms = {};
  if (typeof __adroll._form_attach != 'undefined') {
    __adroll._form_attach();
  }
  if (typeof __adroll._form_tp_attach != 'undefined') {
    __adroll._form_tp_attach();
  }
  window.adroll_rule_type = "p";
  var rule = ["*", "*"];
  if (scheme=='http') { adnxs_domain = 'ib.adnxs.com'; aol_domain = 'leadback.advertising.com';}
  var el = document.createElement("div");
  el.style["width"] = "1px";
  el.style["height"] = "1px";
  el.style["display"] = "inline";
  el.style["position"] = "absolute";
  var content = '';

  if (__adroll.consent_allowed(__adroll.consent_networks.facebook)) {
      !function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function(){n.callMethod?
      n.callMethod.apply(n,arguments):n.queue.push(arguments)};if(!f._fbq)f._fbq=n;
      n.push=n;n.loaded=!0;n.version='2.0';n.queue=[];t=b.createElement(e);t.async=!0;
      t.src=v;s=b.getElementsByTagName(e)[0];s.parentNode.insertBefore(t,s)}(window,
      document,'script','//connect.facebook.net/en_US/fbevents.js');
  }

  try {
      try {
          
(function() {
var rtb = document.createElement("div");
rtb.style["width"] = "1px";
rtb.style["height"] = "1px";
rtb.style["display"] = "inline";
rtb.style["position"] = "absolute";
rtb.innerHTML = ["/cm/g/out?advertisable=KSJPH2ESCJFQDDFFZV7IAC","/cm/x,b,index/out?advertisable=KSJPH2ESCJFQDDFFZV7IAC","/cm/o,outbrain,pubmatic/out?advertisable=KSJPH2ESCJFQDDFFZV7IAC","/cm/n,taboola,triplelift,r/out?advertisable=KSJPH2ESCJFQDDFFZV7IAC"].reduce(function (acc, cmURL) {
    return acc + '<img height="1" width="1" style="border-style:none;" alt="" src="' + __adroll._srv(cmURL) + '"/>';
}, '');
__adroll._head().appendChild(rtb);
})();

      } catch(e) {}
      try {
          (function() {
  var ua = window.navigator.userAgent.toLowerCase();
  if (window === window.top && ua.indexOf('safari') !== -1 && ua.indexOf('chrome') === -1 && ua.indexOf('crios') === -1) {
    window.document.body.className += ' adroll_safari_light_theme';
    var b = window.document.createElement('script');
    b.language = 'javascript';
    b.src = '//d.adroll.com/bounce/pre/KSJPH2ESCJFQDDFFZV7IAC/BHLLOLYIRBCVDMSANIAT6U/?d=' + encodeURIComponent('//s.adroll.com/j/bounce.js');
    window.__adroll._head().appendChild(b);
  }
})();
      } catch(e) {}
      try {
          (function(){
        window.adroll_sendrolling_hashed_only = true;
        var scr = document.createElement("script");
        scr.type = "text/javascript";
        scr.src = "//s.adroll.com/j/sendrolling.js";
        ((document.getElementsByTagName("head") ||
        [null])[0] ||
        document.getElementsByTagName("script")[0].parentNode).appendChild(scr);
    })();
      } catch(e) {}
      try {
          /* For the conversion tracking values to work, the user must place the following code on the ORDER CONFIRMATION PAGE section
<script type="text/javascript">
    window.adroll_order_id = "{orderId}";
    window.adroll_order_total = "{orderGrandTotal}";
</script>
*/
(function () {
    "use strict";

    function getInputContentOrNull(input) {
        return input !== null ? input.content: null;
    }

    function isValidNumber(value) {
        return Number(value).toString() !== "NaN";
    }

    function removeSegmentNameFromPayload(payload) {
        var new_payload = JSON.parse(JSON.stringify(payload));
        delete new_payload.segment_name;
        return new_payload;
    }


    function getProductPagePrice() {
        // Get the current product page price by looking into the <meta> tag
        var price = getInputContentOrNull(
                      document.querySelector('meta[property="product:price:amount"]'));
        return price;
    }


    function checkHomePage() {
        if (window.location.pathname === '/') {
            console.log('AdRoll track event: homeView');
            adroll.track('homeView');
        }
    }


    function checkProductPage() {
        // check if we are into a product page and then track it correctly

        function getProductPageId() {
            var firstElementWithItemIdAttr = document.querySelector('[data-item-id]');
            return firstElementWithItemIdAttr ? firstElementWithItemIdAttr.getAttribute('data-item-id') : null;
        }

        function getProductPageCurrency() {
            // Get the current product page price by looking into the <meta> tag
            var currency = getInputContentOrNull(
                          document.querySelector('meta[property="product:price:currency"]'));
            return currency;
        }

        function isProductPage() {
            // Check if it's a product page by looking into the <meta> tag
            var pageType = getInputContentOrNull(
                             document.querySelector('meta[property="og:type"]'));
            return pageType === 'product';
        }

        function isAddToCartUrl(url) {
            return url.indexOf('api/commerce/shopping-cart/entries') !== -1;
        }

        function setUpAjaxListenerAddToCartEvent() {
            if (typeof XMLHttpRequest.prototype.realOpen === 'undefined') {
                // We also need to listen on Ajax request for adding to cart
                XMLHttpRequest.prototype.realOpen = XMLHttpRequest.prototype.open;
                XMLHttpRequest.prototype.open = function() {
                    this._url = arguments[1];
                    this.realOpen.apply(this, arguments);
                };
                XMLHttpRequest.prototype.realSend = XMLHttpRequest.prototype.send;
                XMLHttpRequest.prototype.send = function(value) {
                    // we are only tracking the "Add to cart" event if the url of the ajax is
                    // the add to cart url
                    if (this._url && isAddToCartUrl(this._url) && value) {
                        var formJsonData = JSON.parse(value);
                        var payload = {"segment_name": "squarespace_added_product_to_cart"};

                        var productPayload = {"product_id": formJsonData.itemId,
                                              "quantity": formJsonData.quantity || 1};
                        var productPrice = getProductPagePrice();
                        if (productPagePrice !== null) {
                            productPayload.price = productPagePrice;
                        }

                        payload.products = [productPayload];

                        console.log('AdRoll track event: pageView', payload);
                        adroll.track("pageView", payload);

                        payload = removeSegmentNameFromPayload(payload);
                        console.log('AdRoll track event: addToCart', payload);
                        adroll.track('addToCart', payload);
                    }
                    this.realSend(value);
                }
            }
        }

        // are we in a specific product page?
        if (isProductPage()) {
            var productPageId = getProductPageId();
            var productPagePrice = getProductPagePrice();
            var productPageCurrency = getProductPageCurrency();

            if (productPageId) {
                var payload = {"segment_name": "squarespace_viewed_product",
                               "products":[{"product_id": productPageId,
                                            "price": productPagePrice,
                                            "currency": productPageCurrency}]};

                console.log("AdRoll track event: pageView", payload);
                adroll.track('pageView', payload);

                payload = removeSegmentNameFromPayload(payload);
                console.log("AdRoll track event: productView", payload);
                adroll.track('productView', payload);

                // since we are in a specific product page, let's set up the
                // "Add to Cart" event handler.
                setUpAjaxListenerAddToCartEvent();
            }
        }
    }



    function checkSearchPage() {
        // If we are in a search results page, we track this
        // passing the search query as well
        if (window.location.pathname.indexOf('/search') !== -1) {
          var urlParams = decodeURIComponent(window.location.search);
          var search_term = /q=((.|\s)*)/.exec(urlParams);
          if (search_term !== null) {
              var payload = {'search_term': search_term[1]}
              console.log("AdRoll track event: pageView", payload);
              adroll.track('pageView', payload);
          }
        }
    }

    function checkCheckoutPage() {
        // If we are in a checkout page, we track this
        if (window.location.pathname === '/checkout') {
            var payload = {'segment_name': 'squarespace_viewed_checkout'}
            console.log("AdRoll track event: pageView", payload);
            adroll.track('pageView', payload);

            console.log("AdRoll track event: checkoutStart", {});
            adroll.track('checkoutStart', {});
        }
    }

    function checkOrderConfirmationPage() {
        if (window.location.pathname.indexOf('/order-confirmed') !== -1) {

            var payload = {'segment_name': 'squarespace_order_received'}

            if (window.adroll_order_id) {
                payload.order_id = window.adroll_order_id;
            }
            if (window.adroll_order_total) {
                payload.conversion_value = window.adroll_order_total;
            }
            try{
                payload.currency = window.Static.SQUARESPACE_CONTEXT.websiteSettings.storeSettings.selectedCurrency;
            }catch(e){
                console.log("AdRoll error fetching currency");
            }

            console.log("AdRoll track event: pageView", payload);
            adroll.track('pageView', payload);

            payload = removeSegmentNameFromPayload(payload);
            console.log("AdRoll track event: purchase", payload);
            adroll.track('purchase', payload);

            if (window.adroll_email) {
                var userIdentifyPayload = {'email': window.adroll_email}
                console.log('AdRoll identify event', userIdentifyPayload);
                adroll.identify(userIdentifyPayload);
            }
        }
    }

    function checkCartViewPage() {
       if (window.location.pathname === '/cart') {
            // Get shopping cart items to send in the payload
            //  we get it using squarespace's JSON view parameter (format=json)
            // We first try to get it from the root url (most websites uses this)
            // in case it is not successfull, we also try in the /shop url.
            // We use the requestSuccess variable below to control this.
            var requestSuccess = false;

            function getDataFromWebsite(url) {
                var xhttp = new XMLHttpRequest();
                xhttp.onreadystatechange = websiteDataCartPageResponseHandler;
                xhttp.open("GET", url, true);
                xhttp.send();
            }

            function websiteDataCartPageResponseHandler() {
                if (this.readyState == 4 && this.status !== 200 && !requestSuccess) {
                    getDataFromWebsite("/shop?format=json");
                    // we set requestSuccess to true regardless of its status so we avoid unlimited requests.
                    requestSuccess = true;
                }
                // The response is ready to be parsed.
                if (this.readyState == 4 && this.status === 200) {
                    requestSuccess = true;
                    var products = [];
                    var cartTotalCents = 0;
                    try {
                        var storeInfo = JSON.parse(this.responseText);
                        for (var index=0; index < storeInfo.shoppingCart.entries.length; index++) {
                            cartTotalCents += storeInfo.shoppingCart.entries[index].purchasePriceCents;
                            products.push({"product_id": storeInfo.shoppingCart.entries[index].itemId,
                                           "price": String(storeInfo.shoppingCart.entries[index].purchasePriceCents / 100),
                                           "quantity": String(storeInfo.shoppingCart.entries[index].quantity)});
                        }
                    } catch(exc) {
                       console.error(exc);
                    }

                   var payload = {"segment_name": "squarespace_viewed_cart"};

                   if (products.length) {
                       payload.products = products;
                       payload.cartValue = String(cartTotalCents / 100);
                   }

                   console.log('AdRoll track event: pageView', payload);
                   adroll.track("pageView", payload);

                   payload = removeSegmentNameFromPayload(payload);
                   console.log('AdRoll track event: cartView', payload);
                   adroll.track('cartView', payload);

                }
            }

            getDataFromWebsite("/?format=json");
        }
    }

    checkHomePage();
    checkProductPage();
    checkSearchPage();
    checkOrderConfirmationPage();
    checkCartViewPage();
    checkCheckoutPage();
})();

      } catch(e) {}
      try {
          if (__adroll.consent_allowed(__adroll.consent_networks.facebook)) {
    var fbLimitedDataUse = true;
    if(typeof __adroll.fb === 'undefined'){
    if (fbLimitedDataUse) {
        fbq('dataProcessingOptions', ['LDU'], 0, 0);
    }
    fbq('init', '1195587457317739');
    fbq('set', 'autoConfig', 'false', '1195587457317739');
    __adroll.fb=true;

    var __fbcd = {segment_eid: "5CKQPXVRVBG3NPZVA5FSEA"};
    for (var prop in __adroll.get_external_data()){
        __fbcd['ar_' + prop] = __adroll.get_external_data()[prop];
    }

    fbq('track', "PageView", __fbcd);
    } else {
    var __fbcd = {event: "EventSegment", segment_eid: "5CKQPXVRVBG3NPZVA5FSEA"};
    for (var prop in __adroll.get_external_data()){
        __fbcd['ar_' + prop] = __adroll.get_external_data()[prop];
    }

    fbq('track', "CustomEvent", __fbcd);
    }
}

      } catch(e) {}
  } catch(e) {}

  var r = Math.random()*10000000000000000;
  content = content.replace(/\[ord\]/gi, r);
  content = content.replace(/\[protocol\]/gi, scheme);
  content = content.replace(/\[adnxs_domain\]/gi, adnxs_domain);
  content = content.replace(/\[aol_domain\]/gi, aol_domain);
  var adroll_tpc = __adroll._global('adroll_tpc');
  if (adroll_tpc) {
    var srv_parts = __adroll._srv().split('?');
    var srv_host = srv_parts[0].substr(srv_parts[0].indexOf(':') + 1);
    var srv_re = new RegExp(srv_host + '([^\?\"\'\>\#\S]+)\\?*', 'gi');
    content = content.replace(srv_re, srv_host + '$1?' + srv_parts[1] + '&');
  }
  content = __adroll.replace_external_data(content);
  el.innerHTML = content;
  __adroll._head().appendChild(el);
  if (typeof __adroll.set_pixel_cookie != 'undefined') {__adroll.set_pixel_cookie(adroll_adv_id, adroll_pix_id, "5CKQPXVRVBG3NPZVA5FSEA");}
}());
